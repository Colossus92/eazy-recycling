create table if not exists companies (
                           updated_at timestamp(6),
                           id uuid not null,
                           building_name varchar(255),
                           building_number varchar(255),
                           chamber_of_commerce_id varchar(255) unique,
                           city varchar(255),
                           country varchar(255),
                           name varchar(255),
                           postal_code varchar(255),
                           street_name varchar(255),
                           processor_id text,
                           vihb_id varchar(255) unique,
                           primary key (id)
);

create table if not exists company_branches (
                         id uuid not null,
                         company_id uuid not null,
                         street_name text not null,
                         postal_code text not null,
                         city text not null,
                         updated_at timestamp(6),
                         building_name text,
                         building_number text not null,
                         country text
);


create table if not exists drivers (
                         updated_at timestamp(6) not null,
                         id uuid not null,
                         first_name varchar(255) not null,
                         last_name varchar(255) not null,
                         primary key (id)
);

create table if not exists goods (
                       goods_item_id bigint unique,
                       updated_at timestamp(6) not null,
                       consignor_classification smallint,
                       consignee_party_id uuid,
                       pickup_party_id uuid,
                       uuid uuid not null,
                       id varchar(255),
                       note varchar(255),
                       primary key (uuid)
);

create table if not exists goods_items (
                             net_net_weight integer not null,
                             quantity integer not null,
                             id bigint generated by default as identity,
                             container_number varchar(255),
                             eural_code varchar(255),
                             name varchar(255),
                             unit varchar(255),
                             waste_stream_number varchar(255),
                             processing_method_code text,
                             primary key (id)
);

create table if not exists locations (
                           building_name varchar(255),
                           building_number varchar(255),
                           city varchar(255),
                           country varchar(255),
                           description varchar(255),
                           id varchar(255) not null,
                           location_type_code varchar(255),
                           postal_code varchar(255),
                           street_name varchar(255),
                           primary key (id)
);

create table if not exists transports (
                          delivery_date_time timestamp(6) without time zone,
                          pickup_date_time timestamp(6) without time zone,
                          updated_at timestamp(6) without time zone NOT NULL,
                          carrier_party_id uuid,
                          consignor_party_id uuid,
                          driver_id uuid,
                          goods_id uuid,
                          id uuid NOT NULL,
                          delivery_location_id character varying(255),
                          pickup_location_id character varying(255),
                          transport_type text,
                          truck_id character varying(255),
                          display_number text,
                          container_id uuid,
                          delivery_company_id uuid,
                          delivery_company_branch_id uuid,
                          pickup_company_id uuid,
                          pickup_company_branch_id uuid,
                          note text,
                          container_operation text CHECK (container_operation IN ('EXCHANGE', 'EMPTY', 'PICKUP', 'DELIVERY', 'WAYBILL')),
                          sequence_number integer,
                          transport_hours NUMERIC(3,1)
);

create table if not exists trucks (
                        updated_at timestamp(6) not null,
                        brand varchar(255),
                        license_plate varchar(255) not null,
                        model varchar(255),
                        primary key (license_plate)
);

create table if not exists waste_containers (
                           uuid uuid not null,
                           id varchar(255),
                           notes varchar(255),
                           building_name varchar(255),
                           building_number varchar(255),
                           city varchar(255),
                           country varchar(255),
                           postal_code varchar(255),
                           street_name varchar(255),
                           location_company_id uuid,
                           primary key (uuid)
);

create table if not exists waybills (
                          delivery_date_time timestamp(6),
                          goods_item_id bigint unique,
                          pickup_date_time timestamp(6),
                          updated_at timestamp(6) not null,
                          carrier_party_id uuid,
                          consignee_party_id uuid,
                          consignor_party_id uuid,
                          pickup_party_id uuid,
                          uuid uuid not null,
                          delivery_location_id varchar(255) unique,
                          id varchar(255),
                          license_plate varchar(255),
                          note varchar(255),
                          pickup_location_id varchar(255) unique,
                          primary key (uuid)
);

create table if not exists profiles (
                           id uuid not null,
                           first_name text not null,
                           last_name text not null
);

create table if not exists container_operations_log (
                          updated_at timestamp(6) not null,
                          id uuid not null,
                          created_at timestamp(6) not null,
                          transport_type text,
                          truck_id character varying(255),
                          display_number text,
                          container_id uuid,
                          delivery_company_id uuid,
                          pickup_company_id uuid,
                          note text,
                          container_operation text CHECK (container_operation IN ('EXCHANGE', 'EMPTY', 'PICKUP', 'DELIVERY', 'WAYBILL'))
);

create table if not exists signatures (
                                       transport_id uuid not null,
                                       consignor_signature text,
                                       consignor_email text,
                                       consignor_signed_at timestamp with time zone,
                                       pickup_signature text,
                                       pickup_email text,
                                       pickup_signed_at timestamp with time zone,
                                       carrier_signature text,
                                       carrier_email text,
                                       carrier_signed_at timestamp with time zone,
                                       consignee_signature text,
                                       consignee_email text,
                                       consignee_signed_at timestamp with time zone
);

create table if not exists eural (
                                  code text not null,
                                  description text not null
);

create table if not exists processing_methods (
                                  code text not null,
                                  description text not null
);

insert into eural (code, description)
values ('16 01 17', 'ferrometalen'),
       ('16 01 18', 'non-ferrometalen'),
       ('17 04 01', 'koper, brons en messing'),
       ('17 04 02', 'aluminium'),
       ('17 04 03', 'lood'),
       ('17 04 04', 'zink'),
       ('17 04 05', 'ijzer en staal'),
       ('17 04 06', 'tin'),
       ('17 04 07', 'gemengde metalen'),
       ('20 01 40', 'metalen'),
       ('16 02 14', 'niet onder 16 02 09 tot en met 16 02 13 vallende afgedankte apparatuur'),
       ('16 02 16', 'niet onder 16 02 15 vallende uit afgedankte apparatuur verwijderde onderdelen (trafo''s en elektromotoren)'),
       ('20 01 36', 'niet onder 20 01 21, 20 01 23 en 20 01 35 vallende afgedankte elektrische en elektronische apparatuur'),
       ('09 01 11*', 'wegwerpcamera''s met onder 16 06 01, 16 06 02 of 16 06 03 vermelde batterijen 09 01 12 niet onder 09
01 11 vallende wegwerpcamera''s met batterijen'),
       ('16 02 13*', 'niet onder 16 02 09 tot en met 16 02 12 vallende afgedankte apparatuur die gevaarlijke onderdelen
bevat'),
       ('16 02 15*', 'uit afgedankte apparatuur verwijderde gevaarlijke onderdelen'),
       ('20 01 35*', 'niet onder 20 01 21 en 20 01 23 vallende afgedankte elektrische en elektronische apparatuur die
gevaarlijke onderdelen bevat'),
       ('16 06 01*', 'loodaccu''s'),
       ('17 04 11', 'niet onder 17 04 10 vallende kabels'),
       ('20 01 33*', 'onder 16 06 01, 16 06 02 of 16 06 03 vermelde batterijen en accuâ€™s alsmede ongesorteerde mengsels van batterijen en accu''s die
dergelijke batterijen en accu''s bevatten'),
       ('20 01 34', 'niet onder 20 01 33 vallende batterijen en accu''s'),
       ('16 06 02*', 'NiCd-batterijen'),
       ('19 12 10', 'brandbaar afval (RDF)'),
       ('19 12 11*', 'overig afval (inclusief mengsels van materialen) van mechanische afvalverwerking dat gevaarlijke stoffen bevat'),
       ('19 12 12 o', 'overig, niet onder 19 12 11 vallend afval (inclusief mengsels van materialen) van mechanische afvalverwerking');

INSERT INTO processing_methods (code, description)
VALUES ('A.01', 'Bewaren'),
       ('A.02', 'Overslag / opbulken'),
       ('B.01', 'Inzetten als veevoer'),
       ('B.02', 'Inzetten als meststof'),
       ('B.03', 'Inzetten als bouwstof'),
       ('B.04', 'Inzetten als brandstof'),
       ('B.05', 'Overig inzetten als grondstof'),
       ('C.01', 'Breken'),
       ('C.02', 'Shredden / knippen'),
       ('C.03', 'Sorteren/scheiden'),
       ('C.04', 'Immobiliseren voor hergebruik'),
       ('D.01', 'Chemisch/fysisch scheiden'),
       ('D.02', 'ONO is ontgiften, neutraliseren en ontwateren'),
       ('D.03', 'Destilleren'),
       ('D.04', 'Metaal terugwinnen (chemisch)'),
       ('D.05', 'Extractief reinigen (grond)'),
       ('D.06', 'Oxidatie onder hoge druk'),
       ('E.01', 'Vergisten'),
       ('E.02', 'Composteren, anaeroob'),
       ('E.03', 'Composteren, aeroob'),
       ('E.04', 'Biologisch reinigen (water)'),
       ('E.05', 'Biologisch reinigen (grond)'),
       ('F.01', 'Verbranden in roosterovens'),
       ('F.02', 'Verbranden in draaitrommelovens'),
       ('F.03', 'Pyrolyse'),
       ('F.04', 'Vergassen'),
       ('F.05', 'Uitgloeien (grond)'),
       ('F.06', 'Verbranden met terugwinnen materiaal (chloor, zwavel ..)'),
       ('F.07', 'Verbranden met terugwinnen energie (bijstoken)'),
       ('G.01', 'Direct storten'),
       ('G.02', 'Immobiliseren');

create table if not exists waste_streams (
                                  number text not null,
                                  name text not null,
                                  eural_code text not null,
                                  processing_method_code text not null,
                                  waste_collection_type text not null,
                                  pickup_location_id text,
                                  consignor_party_id uuid not null,
                                  pickup_party_id uuid not null,
                                  dealer_party_id uuid,
                                  collector_party_id uuid,
                                  broker_party_id uuid,
                                  processor_party_id text
);


create table if not exists pickup_locations (
                                 id text not null,
                                 created_at timestamp with time zone not null default now(),
                                 location_type text not null,
                                 building_number text,
                                 building_number_addition text,
                                 country text,
                                 proximity_description text,
                                 city text,
                                 postal_code text
);
