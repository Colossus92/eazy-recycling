package nl.eazysoftware.eazyrecyclingservice.repository.entity.transport

import jakarta.persistence.*
import nl.eazysoftware.eazyrecyclingservice.domain.model.transport.ContainerOperation
import nl.eazysoftware.eazyrecyclingservice.domain.model.transport.TransportType
import nl.eazysoftware.eazyrecyclingservice.repository.entity.company.CompanyBranchDto
import nl.eazysoftware.eazyrecyclingservice.repository.entity.company.CompanyDto
import nl.eazysoftware.eazyrecyclingservice.repository.entity.container.WasteContainerDto
import nl.eazysoftware.eazyrecyclingservice.repository.entity.goods.GoodsDto
import nl.eazysoftware.eazyrecyclingservice.repository.entity.truck.Truck
import nl.eazysoftware.eazyrecyclingservice.repository.entity.user.ProfileDto
import nl.eazysoftware.eazyrecyclingservice.repository.entity.waybill.LocationDto
import java.time.LocalDateTime
import java.util.*

@Entity
@Table(name = "transports")
data class TransportDto(
  @Id
    @GeneratedValue(strategy = GenerationType.UUID)
    val id: UUID? = null,

  /**
     * Will be generated by database.
     */
    @Column(unique = true, nullable = true)
    val displayNumber: String? = null,

  /**
     * The party client ordering the transport.
     */
    @ManyToOne
    @JoinColumn(name = "consignor_party_id", referencedColumnName = "id")
    val consignorParty: CompanyDto,

  /**
     * The party executing the transport.
     */
    @ManyToOne
    @JoinColumn(name = "carrier_party_id", referencedColumnName = "id")
    val carrierParty: CompanyDto,

  /**
     * This is the company that is located at the pickup location.
     *
     * This is not necessarily the Pickup Party! The pickup party is the company disposing the waste.
     */
    @ManyToOne
    @JoinColumn(name = "pickup_company_id", referencedColumnName = "id")
    val pickupCompany: CompanyDto?,

  @ManyToOne
    @JoinColumn(name = "pickup_company_branch_id", referencedColumnName = "id")
    val pickupCompanyBranch: CompanyBranchDto? = null,

  @OneToOne
    @JoinColumn(name = "pickup_location_id", referencedColumnName = "id")
    val pickupLocation: LocationDto,

  val pickupDateTime: LocalDateTime,

  /**
     * This is the company that is located at the delivery location.
     *
     * This is not necessarily the Consignee Party! The consignee party is the company taking ownership of the waste.
     */
    @ManyToOne
    @JoinColumn(name = "delivery_company_id", referencedColumnName = "id")
    val deliveryCompany: CompanyDto?,

  @ManyToOne
    @JoinColumn(name = "delivery_company_branch_id", referencedColumnName = "id")
    val deliveryCompanyBranch: CompanyBranchDto? = null,

  @OneToOne
    @JoinColumn(name = "delivery_location_id", referencedColumnName = "id")
    val deliveryLocation: LocationDto,

  val deliveryDateTime: LocalDateTime?,

  @Enumerated(EnumType.STRING)
    @Column(nullable = true)
    val transportType: TransportType,

  @Enumerated(EnumType.STRING)
    @Column(name = "container_operation", columnDefinition = "container_operations", nullable = true)
    val containerOperation: ContainerOperation? = null,

  @OneToOne
    @JoinColumn(name = "container_id", referencedColumnName = "uuid")
    val wasteContainer: WasteContainerDto? = null,

  @ManyToOne
    @JoinColumn(name = "truck_id", referencedColumnName = "license_plate", nullable = true)
    val truck: Truck? = null,

  @ManyToOne
    @JoinColumn(name = "driver_id", referencedColumnName = "id", nullable = true)
    val driver: ProfileDto? = null,

  val note: String,

  @OneToOne(cascade = [CascadeType.ALL])
    @JoinColumn(name = "goods_id", referencedColumnName = "uuid")
    val goods: GoodsDto? = null,

  @Column(name = "transport_hours")
    val transportHours: Double? = null,

  @Column(nullable = false)
    var updatedAt: LocalDateTime? = LocalDateTime.now(),

  @Column(nullable = false)
    var sequenceNumber: Int

    ) {

    enum class Status {
        UNPLANNED,
        PLANNED,
        FINISHED,
        INVOICED,
    }

    @PrePersist
    fun prePersist() {
        updatedAt = LocalDateTime.now()
    }

    @PreUpdate
    fun preUpdate() {
        updatedAt = LocalDateTime.now()
    }

    fun getStatus(): Status {
        if (driver == null || truck == null) {
            return Status.UNPLANNED
        }

        if (transportHours != null) {
            return Status.FINISHED
        }

        return Status.PLANNED
    }
}
