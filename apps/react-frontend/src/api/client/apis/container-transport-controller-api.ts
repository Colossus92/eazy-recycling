/* tslint:disable */
/* eslint-disable */
/**
 * Eazy Recycling Backend Service
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosInstance, AxiosPromise, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import {
  assertParamExists,
  createRequestFunction,
  DUMMY_BASE_URL,
  serializeDataIfNeeded,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  toPathString
} from '../common';
// @ts-ignore
import { BASE_PATH, BaseAPI, COLLECTION_FORMATS, operationServerMap, type RequestArgs, RequiredError } from '../base';
// @ts-ignore
// @ts-ignore
// @ts-ignore
import type {
  ContainerTransportRequest,
  CreateContainerTransportResponse,
  UpdateContainerTransportResponse
} from '../models';

/**
 * ContainerTransportControllerApi - axios parameter creator
 * @export
 */
export const ContainerTransportControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         *
         * @param {ContainerTransportRequest} containerTransportRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createContainerTransport: async (containerTransportRequest: ContainerTransportRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'containerTransportRequest' is not null or undefined
            assertParamExists('createContainerTransport', 'containerTransportRequest', containerTransportRequest)
            const localVarPath = `/transport/container`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)



            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(containerTransportRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} id
         * @param {ContainerTransportRequest} containerTransportRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateContainerTransport: async (id: string, containerTransportRequest: ContainerTransportRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateContainerTransport', 'id', id)
            // verify required parameter 'containerTransportRequest' is not null or undefined
            assertParamExists('updateContainerTransport', 'containerTransportRequest', containerTransportRequest)
            const localVarPath = `/transport/container/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)



            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(containerTransportRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ContainerTransportControllerApi - functional programming interface
 * @export
 */
export const ContainerTransportControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ContainerTransportControllerApiAxiosParamCreator(configuration)
    return {
        /**
         *
         * @param {ContainerTransportRequest} containerTransportRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createContainerTransport(containerTransportRequest: ContainerTransportRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateContainerTransportResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createContainerTransport(containerTransportRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ContainerTransportControllerApi.createContainerTransport']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @param {string} id
         * @param {ContainerTransportRequest} containerTransportRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateContainerTransport(id: string, containerTransportRequest: ContainerTransportRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UpdateContainerTransportResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateContainerTransport(id, containerTransportRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ContainerTransportControllerApi.updateContainerTransport']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ContainerTransportControllerApi - factory interface
 * @export
 */
export const ContainerTransportControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ContainerTransportControllerApiFp(configuration)
    return {
        /**
         *
         * @param {ContainerTransportRequest} containerTransportRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createContainerTransport(containerTransportRequest: ContainerTransportRequest, options?: RawAxiosRequestConfig): AxiosPromise<CreateContainerTransportResponse> {
            return localVarFp.createContainerTransport(containerTransportRequest, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {string} id
         * @param {ContainerTransportRequest} containerTransportRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateContainerTransport(id: string, containerTransportRequest: ContainerTransportRequest, options?: RawAxiosRequestConfig): AxiosPromise<UpdateContainerTransportResponse> {
            return localVarFp.updateContainerTransport(id, containerTransportRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ContainerTransportControllerApi - object-oriented interface
 * @export
 * @class ContainerTransportControllerApi
 * @extends {BaseAPI}
 */
export class ContainerTransportControllerApi extends BaseAPI {
    /**
     *
     * @param {ContainerTransportRequest} containerTransportRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContainerTransportControllerApi
     */
    public createContainerTransport(containerTransportRequest: ContainerTransportRequest, options?: RawAxiosRequestConfig) {
        return ContainerTransportControllerApiFp(this.configuration).createContainerTransport(containerTransportRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @param {string} id
     * @param {ContainerTransportRequest} containerTransportRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContainerTransportControllerApi
     */
    public updateContainerTransport(id: string, containerTransportRequest: ContainerTransportRequest, options?: RawAxiosRequestConfig) {
        return ContainerTransportControllerApiFp(this.configuration).updateContainerTransport(id, containerTransportRequest, options).then((request) => request(this.axios, this.basePath));
    }
}

