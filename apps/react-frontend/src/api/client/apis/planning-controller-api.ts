/* tslint:disable */
/* eslint-disable */
/**
 * Eazy Recycling Backend Service
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosInstance, AxiosPromise, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import {
  assertParamExists,
  createRequestFunction,
  DUMMY_BASE_URL,
  serializeDataIfNeeded,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  toPathString
} from '../common';
// @ts-ignore
import { BASE_PATH, BaseAPI, COLLECTION_FORMATS, operationServerMap, type RequestArgs, RequiredError } from '../base';
// @ts-ignore
// @ts-ignore
// @ts-ignore
import type { DriverPlanningItem, PlanningView, TransportReorderRequest } from '../models';

/**
 * PlanningControllerApi - axios parameter creator
 * @export
 */
export const PlanningControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         *
         * @param {string} pickupDate
         * @param {string} [truckId]
         * @param {string} [driverId]
         * @param {string} [status]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPlanningByDate: async (pickupDate: string, truckId?: string, driverId?: string, status?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pickupDate' is not null or undefined
            assertParamExists('getPlanningByDate', 'pickupDate', pickupDate)
            const localVarPath = `/planning/{pickupDate}`
                .replace(`{${"pickupDate"}}`, encodeURIComponent(String(pickupDate)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (truckId !== undefined) {
                localVarQueryParameter['truckId'] = truckId;
            }

            if (driverId !== undefined) {
                localVarQueryParameter['driverId'] = driverId;
            }

            if (status !== undefined) {
                localVarQueryParameter['status'] = status;
            }



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} driverId
         * @param {string} startDate
         * @param {string} endDate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPlanningByDriver: async (driverId: string, startDate: string, endDate: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'driverId' is not null or undefined
            assertParamExists('getPlanningByDriver', 'driverId', driverId)
            // verify required parameter 'startDate' is not null or undefined
            assertParamExists('getPlanningByDriver', 'startDate', startDate)
            // verify required parameter 'endDate' is not null or undefined
            assertParamExists('getPlanningByDriver', 'endDate', endDate)
            const localVarPath = `/planning/driver/{driverId}`
                .replace(`{${"driverId"}}`, encodeURIComponent(String(driverId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (startDate !== undefined) {
                localVarQueryParameter['startDate'] = (startDate as any instanceof Date) ?
                    (startDate as any).toISOString().substring(0,10) :
                    startDate;
            }

            if (endDate !== undefined) {
                localVarQueryParameter['endDate'] = (endDate as any instanceof Date) ?
                    (endDate as any).toISOString().substring(0,10) :
                    endDate;
            }



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {TransportReorderRequest} transportReorderRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reorderTransports: async (transportReorderRequest: TransportReorderRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'transportReorderRequest' is not null or undefined
            assertParamExists('reorderTransports', 'transportReorderRequest', transportReorderRequest)
            const localVarPath = `/planning/reorder`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)



            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(transportReorderRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PlanningControllerApi - functional programming interface
 * @export
 */
export const PlanningControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PlanningControllerApiAxiosParamCreator(configuration)
    return {
        /**
         *
         * @param {string} pickupDate
         * @param {string} [truckId]
         * @param {string} [driverId]
         * @param {string} [status]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPlanningByDate(pickupDate: string, truckId?: string, driverId?: string, status?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PlanningView>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPlanningByDate(pickupDate, truckId, driverId, status, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PlanningControllerApi.getPlanningByDate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @param {string} driverId
         * @param {string} startDate
         * @param {string} endDate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPlanningByDriver(driverId: string, startDate: string, endDate: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<{ [key: string]: { [key: string]: Array<DriverPlanningItem>; }; }>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPlanningByDriver(driverId, startDate, endDate, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PlanningControllerApi.getPlanningByDriver']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @param {TransportReorderRequest} transportReorderRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async reorderTransports(transportReorderRequest: TransportReorderRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PlanningView>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.reorderTransports(transportReorderRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PlanningControllerApi.reorderTransports']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * PlanningControllerApi - factory interface
 * @export
 */
export const PlanningControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PlanningControllerApiFp(configuration)
    return {
        /**
         *
         * @param {string} pickupDate
         * @param {string} [truckId]
         * @param {string} [driverId]
         * @param {string} [status]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPlanningByDate(pickupDate: string, truckId?: string, driverId?: string, status?: string, options?: RawAxiosRequestConfig): AxiosPromise<PlanningView> {
            return localVarFp.getPlanningByDate(pickupDate, truckId, driverId, status, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {string} driverId
         * @param {string} startDate
         * @param {string} endDate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPlanningByDriver(driverId: string, startDate: string, endDate: string, options?: RawAxiosRequestConfig): AxiosPromise<{ [key: string]: { [key: string]: Array<DriverPlanningItem>; }; }> {
            return localVarFp.getPlanningByDriver(driverId, startDate, endDate, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {TransportReorderRequest} transportReorderRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reorderTransports(transportReorderRequest: TransportReorderRequest, options?: RawAxiosRequestConfig): AxiosPromise<PlanningView> {
            return localVarFp.reorderTransports(transportReorderRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * PlanningControllerApi - object-oriented interface
 * @export
 * @class PlanningControllerApi
 * @extends {BaseAPI}
 */
export class PlanningControllerApi extends BaseAPI {
    /**
     *
     * @param {string} pickupDate
     * @param {string} [truckId]
     * @param {string} [driverId]
     * @param {string} [status]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlanningControllerApi
     */
    public getPlanningByDate(pickupDate: string, truckId?: string, driverId?: string, status?: string, options?: RawAxiosRequestConfig) {
        return PlanningControllerApiFp(this.configuration).getPlanningByDate(pickupDate, truckId, driverId, status, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @param {string} driverId
     * @param {string} startDate
     * @param {string} endDate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlanningControllerApi
     */
    public getPlanningByDriver(driverId: string, startDate: string, endDate: string, options?: RawAxiosRequestConfig) {
        return PlanningControllerApiFp(this.configuration).getPlanningByDriver(driverId, startDate, endDate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @param {TransportReorderRequest} transportReorderRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlanningControllerApi
     */
    public reorderTransports(transportReorderRequest: TransportReorderRequest, options?: RawAxiosRequestConfig) {
        return PlanningControllerApiFp(this.configuration).reorderTransports(transportReorderRequest, options).then((request) => request(this.axios, this.basePath));
    }
}

