/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { ProcessingMethodDto } from '../models';
/**
 * ProcessingMethodControllerApi - axios parameter creator
 * @export
 */
export const ProcessingMethodControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {ProcessingMethodDto} processingMethodDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createProcessingMethod: async (processingMethodDto: ProcessingMethodDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'processingMethodDto' is not null or undefined
            assertParamExists('createProcessingMethod', 'processingMethodDto', processingMethodDto)
            const localVarPath = `/processing-methods`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(processingMethodDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} code 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteProcessingMethod: async (code: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'code' is not null or undefined
            assertParamExists('deleteProcessingMethod', 'code', code)
            const localVarPath = `/processing-methods/{code}`
                .replace(`{${"code"}}`, encodeURIComponent(String(code)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProcessingMethods: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/processing-methods`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} code 
         * @param {ProcessingMethodDto} processingMethodDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateProcessingMethod: async (code: string, processingMethodDto: ProcessingMethodDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'code' is not null or undefined
            assertParamExists('updateProcessingMethod', 'code', code)
            // verify required parameter 'processingMethodDto' is not null or undefined
            assertParamExists('updateProcessingMethod', 'processingMethodDto', processingMethodDto)
            const localVarPath = `/processing-methods/{code}`
                .replace(`{${"code"}}`, encodeURIComponent(String(code)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(processingMethodDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProcessingMethodControllerApi - functional programming interface
 * @export
 */
export const ProcessingMethodControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ProcessingMethodControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {ProcessingMethodDto} processingMethodDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createProcessingMethod(processingMethodDto: ProcessingMethodDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProcessingMethodDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createProcessingMethod(processingMethodDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProcessingMethodControllerApi.createProcessingMethod']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} code 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteProcessingMethod(code: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteProcessingMethod(code, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProcessingMethodControllerApi.deleteProcessingMethod']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getProcessingMethods(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ProcessingMethodDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getProcessingMethods(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProcessingMethodControllerApi.getProcessingMethods']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} code 
         * @param {ProcessingMethodDto} processingMethodDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateProcessingMethod(code: string, processingMethodDto: ProcessingMethodDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateProcessingMethod(code, processingMethodDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProcessingMethodControllerApi.updateProcessingMethod']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ProcessingMethodControllerApi - factory interface
 * @export
 */
export const ProcessingMethodControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ProcessingMethodControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {ProcessingMethodDto} processingMethodDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createProcessingMethod(processingMethodDto: ProcessingMethodDto, options?: RawAxiosRequestConfig): AxiosPromise<ProcessingMethodDto> {
            return localVarFp.createProcessingMethod(processingMethodDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} code 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteProcessingMethod(code: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteProcessingMethod(code, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProcessingMethods(options?: RawAxiosRequestConfig): AxiosPromise<Array<ProcessingMethodDto>> {
            return localVarFp.getProcessingMethods(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} code 
         * @param {ProcessingMethodDto} processingMethodDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateProcessingMethod(code: string, processingMethodDto: ProcessingMethodDto, options?: RawAxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.updateProcessingMethod(code, processingMethodDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ProcessingMethodControllerApi - object-oriented interface
 * @export
 * @class ProcessingMethodControllerApi
 * @extends {BaseAPI}
 */
export class ProcessingMethodControllerApi extends BaseAPI {
    /**
     * 
     * @param {ProcessingMethodDto} processingMethodDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProcessingMethodControllerApi
     */
    public createProcessingMethod(processingMethodDto: ProcessingMethodDto, options?: RawAxiosRequestConfig) {
        return ProcessingMethodControllerApiFp(this.configuration).createProcessingMethod(processingMethodDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} code 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProcessingMethodControllerApi
     */
    public deleteProcessingMethod(code: string, options?: RawAxiosRequestConfig) {
        return ProcessingMethodControllerApiFp(this.configuration).deleteProcessingMethod(code, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProcessingMethodControllerApi
     */
    public getProcessingMethods(options?: RawAxiosRequestConfig) {
        return ProcessingMethodControllerApiFp(this.configuration).getProcessingMethods(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} code 
     * @param {ProcessingMethodDto} processingMethodDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProcessingMethodControllerApi
     */
    public updateProcessingMethod(code: string, processingMethodDto: ProcessingMethodDto, options?: RawAxiosRequestConfig) {
        return ProcessingMethodControllerApiFp(this.configuration).updateProcessingMethod(code, processingMethodDto, options).then((request) => request(this.axios, this.basePath));
    }
}

