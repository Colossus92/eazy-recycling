/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { Truck } from '../models';
/**
 * TruckControllerApi - axios parameter creator
 * @export
 */
export const TruckControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {Truck} truck 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTruck: async (truck: Truck, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'truck' is not null or undefined
            assertParamExists('createTruck', 'truck', truck)
            const localVarPath = `/trucks`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(truck, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} licensePlate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTruck: async (licensePlate: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'licensePlate' is not null or undefined
            assertParamExists('deleteTruck', 'licensePlate', licensePlate)
            const localVarPath = `/trucks/{licensePlate}`
                .replace(`{${"licensePlate"}}`, encodeURIComponent(String(licensePlate)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllTrucks: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/trucks`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} licensePlate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTruckByLicensePlate: async (licensePlate: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'licensePlate' is not null or undefined
            assertParamExists('getTruckByLicensePlate', 'licensePlate', licensePlate)
            const localVarPath = `/trucks/{licensePlate}`
                .replace(`{${"licensePlate"}}`, encodeURIComponent(String(licensePlate)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} licensePlate 
         * @param {Truck} truck 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTruck: async (licensePlate: string, truck: Truck, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'licensePlate' is not null or undefined
            assertParamExists('updateTruck', 'licensePlate', licensePlate)
            // verify required parameter 'truck' is not null or undefined
            assertParamExists('updateTruck', 'truck', truck)
            const localVarPath = `/trucks/{licensePlate}`
                .replace(`{${"licensePlate"}}`, encodeURIComponent(String(licensePlate)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(truck, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TruckControllerApi - functional programming interface
 * @export
 */
export const TruckControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TruckControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {Truck} truck 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createTruck(truck: Truck, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createTruck(truck, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TruckControllerApi.createTruck']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} licensePlate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteTruck(licensePlate: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteTruck(licensePlate, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TruckControllerApi.deleteTruck']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllTrucks(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Truck>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllTrucks(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TruckControllerApi.getAllTrucks']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} licensePlate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTruckByLicensePlate(licensePlate: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Truck>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTruckByLicensePlate(licensePlate, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TruckControllerApi.getTruckByLicensePlate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} licensePlate 
         * @param {Truck} truck 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateTruck(licensePlate: string, truck: Truck, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Truck>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateTruck(licensePlate, truck, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TruckControllerApi.updateTruck']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * TruckControllerApi - factory interface
 * @export
 */
export const TruckControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TruckControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {Truck} truck 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTruck(truck: Truck, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.createTruck(truck, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} licensePlate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTruck(licensePlate: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteTruck(licensePlate, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllTrucks(options?: RawAxiosRequestConfig): AxiosPromise<Array<Truck>> {
            return localVarFp.getAllTrucks(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} licensePlate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTruckByLicensePlate(licensePlate: string, options?: RawAxiosRequestConfig): AxiosPromise<Truck> {
            return localVarFp.getTruckByLicensePlate(licensePlate, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} licensePlate 
         * @param {Truck} truck 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTruck(licensePlate: string, truck: Truck, options?: RawAxiosRequestConfig): AxiosPromise<Truck> {
            return localVarFp.updateTruck(licensePlate, truck, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * TruckControllerApi - object-oriented interface
 * @export
 * @class TruckControllerApi
 * @extends {BaseAPI}
 */
export class TruckControllerApi extends BaseAPI {
    /**
     * 
     * @param {Truck} truck 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TruckControllerApi
     */
    public createTruck(truck: Truck, options?: RawAxiosRequestConfig) {
        return TruckControllerApiFp(this.configuration).createTruck(truck, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} licensePlate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TruckControllerApi
     */
    public deleteTruck(licensePlate: string, options?: RawAxiosRequestConfig) {
        return TruckControllerApiFp(this.configuration).deleteTruck(licensePlate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TruckControllerApi
     */
    public getAllTrucks(options?: RawAxiosRequestConfig) {
        return TruckControllerApiFp(this.configuration).getAllTrucks(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} licensePlate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TruckControllerApi
     */
    public getTruckByLicensePlate(licensePlate: string, options?: RawAxiosRequestConfig) {
        return TruckControllerApiFp(this.configuration).getTruckByLicensePlate(licensePlate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} licensePlate 
     * @param {Truck} truck 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TruckControllerApi
     */
    public updateTruck(licensePlate: string, truck: Truck, options?: RawAxiosRequestConfig) {
        return TruckControllerApiFp(this.configuration).updateTruck(licensePlate, truck, options).then((request) => request(this.axios, this.basePath));
    }
}

