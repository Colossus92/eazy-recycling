/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { CreateContainerTransportRequest } from '../models';
// @ts-ignore
import type { CreateWasteTransportRequest } from '../models';
// @ts-ignore
import type { TransportDto } from '../models';
// @ts-ignore
import type { TransportFinishedRequest } from '../models';
/**
 * TransportControllerApi - axios parameter creator
 * @export
 */
export const TransportControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {CreateContainerTransportRequest} createContainerTransportRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createContainerTransport: async (createContainerTransportRequest: CreateContainerTransportRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createContainerTransportRequest' is not null or undefined
            assertParamExists('createContainerTransport', 'createContainerTransportRequest', createContainerTransportRequest)
            const localVarPath = `/transport/container`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createContainerTransportRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CreateWasteTransportRequest} createWasteTransportRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createWasteTransport: async (createWasteTransportRequest: CreateWasteTransportRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createWasteTransportRequest' is not null or undefined
            assertParamExists('createWasteTransport', 'createWasteTransportRequest', createWasteTransportRequest)
            const localVarPath = `/transport/waste`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createWasteTransportRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTransport: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteTransport', 'id', id)
            const localVarPath = `/transport/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllTransports: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/transport`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTransportById: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getTransportById', 'id', id)
            const localVarPath = `/transport/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {TransportFinishedRequest} transportFinishedRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        markTransportAsFinished: async (id: string, transportFinishedRequest: TransportFinishedRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('markTransportAsFinished', 'id', id)
            // verify required parameter 'transportFinishedRequest' is not null or undefined
            assertParamExists('markTransportAsFinished', 'transportFinishedRequest', transportFinishedRequest)
            const localVarPath = `/transport/{id}/finished`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(transportFinishedRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {CreateContainerTransportRequest} createContainerTransportRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateContainerTransport: async (id: string, createContainerTransportRequest: CreateContainerTransportRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateContainerTransport', 'id', id)
            // verify required parameter 'createContainerTransportRequest' is not null or undefined
            assertParamExists('updateContainerTransport', 'createContainerTransportRequest', createContainerTransportRequest)
            const localVarPath = `/transport/container/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createContainerTransportRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {CreateWasteTransportRequest} createWasteTransportRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateWasteTransport: async (id: string, createWasteTransportRequest: CreateWasteTransportRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateWasteTransport', 'id', id)
            // verify required parameter 'createWasteTransportRequest' is not null or undefined
            assertParamExists('updateWasteTransport', 'createWasteTransportRequest', createWasteTransportRequest)
            const localVarPath = `/transport/waste/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createWasteTransportRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TransportControllerApi - functional programming interface
 * @export
 */
export const TransportControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TransportControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {CreateContainerTransportRequest} createContainerTransportRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createContainerTransport(createContainerTransportRequest: CreateContainerTransportRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TransportDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createContainerTransport(createContainerTransportRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TransportControllerApi.createContainerTransport']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {CreateWasteTransportRequest} createWasteTransportRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createWasteTransport(createWasteTransportRequest: CreateWasteTransportRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TransportDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createWasteTransport(createWasteTransportRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TransportControllerApi.createWasteTransport']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteTransport(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteTransport(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TransportControllerApi.deleteTransport']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllTransports(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<TransportDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllTransports(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TransportControllerApi.getAllTransports']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTransportById(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TransportDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTransportById(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TransportControllerApi.getTransportById']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {TransportFinishedRequest} transportFinishedRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async markTransportAsFinished(id: string, transportFinishedRequest: TransportFinishedRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TransportDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.markTransportAsFinished(id, transportFinishedRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TransportControllerApi.markTransportAsFinished']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {CreateContainerTransportRequest} createContainerTransportRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateContainerTransport(id: string, createContainerTransportRequest: CreateContainerTransportRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TransportDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateContainerTransport(id, createContainerTransportRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TransportControllerApi.updateContainerTransport']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {CreateWasteTransportRequest} createWasteTransportRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateWasteTransport(id: string, createWasteTransportRequest: CreateWasteTransportRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TransportDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateWasteTransport(id, createWasteTransportRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TransportControllerApi.updateWasteTransport']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * TransportControllerApi - factory interface
 * @export
 */
export const TransportControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TransportControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {CreateContainerTransportRequest} createContainerTransportRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createContainerTransport(createContainerTransportRequest: CreateContainerTransportRequest, options?: RawAxiosRequestConfig): AxiosPromise<TransportDto> {
            return localVarFp.createContainerTransport(createContainerTransportRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CreateWasteTransportRequest} createWasteTransportRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createWasteTransport(createWasteTransportRequest: CreateWasteTransportRequest, options?: RawAxiosRequestConfig): AxiosPromise<TransportDto> {
            return localVarFp.createWasteTransport(createWasteTransportRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTransport(id: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteTransport(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllTransports(options?: RawAxiosRequestConfig): AxiosPromise<Array<TransportDto>> {
            return localVarFp.getAllTransports(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTransportById(id: string, options?: RawAxiosRequestConfig): AxiosPromise<TransportDto> {
            return localVarFp.getTransportById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {TransportFinishedRequest} transportFinishedRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        markTransportAsFinished(id: string, transportFinishedRequest: TransportFinishedRequest, options?: RawAxiosRequestConfig): AxiosPromise<TransportDto> {
            return localVarFp.markTransportAsFinished(id, transportFinishedRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {CreateContainerTransportRequest} createContainerTransportRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateContainerTransport(id: string, createContainerTransportRequest: CreateContainerTransportRequest, options?: RawAxiosRequestConfig): AxiosPromise<TransportDto> {
            return localVarFp.updateContainerTransport(id, createContainerTransportRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {CreateWasteTransportRequest} createWasteTransportRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateWasteTransport(id: string, createWasteTransportRequest: CreateWasteTransportRequest, options?: RawAxiosRequestConfig): AxiosPromise<TransportDto> {
            return localVarFp.updateWasteTransport(id, createWasteTransportRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * TransportControllerApi - object-oriented interface
 * @export
 * @class TransportControllerApi
 * @extends {BaseAPI}
 */
export class TransportControllerApi extends BaseAPI {
    /**
     * 
     * @param {CreateContainerTransportRequest} createContainerTransportRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransportControllerApi
     */
    public createContainerTransport(createContainerTransportRequest: CreateContainerTransportRequest, options?: RawAxiosRequestConfig) {
        return TransportControllerApiFp(this.configuration).createContainerTransport(createContainerTransportRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CreateWasteTransportRequest} createWasteTransportRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransportControllerApi
     */
    public createWasteTransport(createWasteTransportRequest: CreateWasteTransportRequest, options?: RawAxiosRequestConfig) {
        return TransportControllerApiFp(this.configuration).createWasteTransport(createWasteTransportRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransportControllerApi
     */
    public deleteTransport(id: string, options?: RawAxiosRequestConfig) {
        return TransportControllerApiFp(this.configuration).deleteTransport(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransportControllerApi
     */
    public getAllTransports(options?: RawAxiosRequestConfig) {
        return TransportControllerApiFp(this.configuration).getAllTransports(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransportControllerApi
     */
    public getTransportById(id: string, options?: RawAxiosRequestConfig) {
        return TransportControllerApiFp(this.configuration).getTransportById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {TransportFinishedRequest} transportFinishedRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransportControllerApi
     */
    public markTransportAsFinished(id: string, transportFinishedRequest: TransportFinishedRequest, options?: RawAxiosRequestConfig) {
        return TransportControllerApiFp(this.configuration).markTransportAsFinished(id, transportFinishedRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {CreateContainerTransportRequest} createContainerTransportRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransportControllerApi
     */
    public updateContainerTransport(id: string, createContainerTransportRequest: CreateContainerTransportRequest, options?: RawAxiosRequestConfig) {
        return TransportControllerApiFp(this.configuration).updateContainerTransport(id, createContainerTransportRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {CreateWasteTransportRequest} createWasteTransportRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransportControllerApi
     */
    public updateWasteTransport(id: string, createWasteTransportRequest: CreateWasteTransportRequest, options?: RawAxiosRequestConfig) {
        return TransportControllerApiFp(this.configuration).updateWasteTransport(id, createWasteTransportRequest, options).then((request) => request(this.axios, this.basePath));
    }
}

