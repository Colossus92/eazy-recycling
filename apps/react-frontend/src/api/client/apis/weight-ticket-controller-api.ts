/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { CreateWeightTicketResponse } from '../models';
// @ts-ignore
import type { WeightTicketDetailView } from '../models';
// @ts-ignore
import type { WeightTicketListView } from '../models';
// @ts-ignore
import type { WeightTicketRequest } from '../models';
/**
 * WeightTicketControllerApi - axios parameter creator
 * @export
 */
export const WeightTicketControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} weightTicketId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        _delete: async (weightTicketId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'weightTicketId' is not null or undefined
            assertParamExists('_delete', 'weightTicketId', weightTicketId)
            const localVarPath = `/weight-tickets/{weightTicketId}`
                .replace(`{${"weightTicketId"}}`, encodeURIComponent(String(weightTicketId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {WeightTicketRequest} weightTicketRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create: async (weightTicketRequest: WeightTicketRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'weightTicketRequest' is not null or undefined
            assertParamExists('create', 'weightTicketRequest', weightTicketRequest)
            const localVarPath = `/weight-tickets`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(weightTicketRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} weightTicketId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWeightTicketByNumber: async (weightTicketId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'weightTicketId' is not null or undefined
            assertParamExists('getWeightTicketByNumber', 'weightTicketId', weightTicketId)
            const localVarPath = `/weight-tickets/{weightTicketId}`
                .replace(`{${"weightTicketId"}}`, encodeURIComponent(String(weightTicketId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWeightTickets: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/weight-tickets`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} weightTicketId 
         * @param {WeightTicketRequest} weightTicketRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        update: async (weightTicketId: number, weightTicketRequest: WeightTicketRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'weightTicketId' is not null or undefined
            assertParamExists('update', 'weightTicketId', weightTicketId)
            // verify required parameter 'weightTicketRequest' is not null or undefined
            assertParamExists('update', 'weightTicketRequest', weightTicketRequest)
            const localVarPath = `/weight-tickets/{weightTicketId}`
                .replace(`{${"weightTicketId"}}`, encodeURIComponent(String(weightTicketId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(weightTicketRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * WeightTicketControllerApi - functional programming interface
 * @export
 */
export const WeightTicketControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = WeightTicketControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {number} weightTicketId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async _delete(weightTicketId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator._delete(weightTicketId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WeightTicketControllerApi._delete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {WeightTicketRequest} weightTicketRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async create(weightTicketRequest: WeightTicketRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateWeightTicketResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.create(weightTicketRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WeightTicketControllerApi.create']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} weightTicketId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getWeightTicketByNumber(weightTicketId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WeightTicketDetailView>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getWeightTicketByNumber(weightTicketId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WeightTicketControllerApi.getWeightTicketByNumber']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getWeightTickets(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<WeightTicketListView>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getWeightTickets(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WeightTicketControllerApi.getWeightTickets']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} weightTicketId 
         * @param {WeightTicketRequest} weightTicketRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async update(weightTicketId: number, weightTicketRequest: WeightTicketRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.update(weightTicketId, weightTicketRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WeightTicketControllerApi.update']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * WeightTicketControllerApi - factory interface
 * @export
 */
export const WeightTicketControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = WeightTicketControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {number} weightTicketId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        _delete(weightTicketId: number, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp._delete(weightTicketId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {WeightTicketRequest} weightTicketRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create(weightTicketRequest: WeightTicketRequest, options?: RawAxiosRequestConfig): AxiosPromise<CreateWeightTicketResponse> {
            return localVarFp.create(weightTicketRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} weightTicketId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWeightTicketByNumber(weightTicketId: number, options?: RawAxiosRequestConfig): AxiosPromise<WeightTicketDetailView> {
            return localVarFp.getWeightTicketByNumber(weightTicketId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWeightTickets(options?: RawAxiosRequestConfig): AxiosPromise<Array<WeightTicketListView>> {
            return localVarFp.getWeightTickets(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} weightTicketId 
         * @param {WeightTicketRequest} weightTicketRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        update(weightTicketId: number, weightTicketRequest: WeightTicketRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.update(weightTicketId, weightTicketRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * WeightTicketControllerApi - object-oriented interface
 * @export
 * @class WeightTicketControllerApi
 * @extends {BaseAPI}
 */
export class WeightTicketControllerApi extends BaseAPI {
    /**
     * 
     * @param {number} weightTicketId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WeightTicketControllerApi
     */
    public _delete(weightTicketId: number, options?: RawAxiosRequestConfig) {
        return WeightTicketControllerApiFp(this.configuration)._delete(weightTicketId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {WeightTicketRequest} weightTicketRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WeightTicketControllerApi
     */
    public create(weightTicketRequest: WeightTicketRequest, options?: RawAxiosRequestConfig) {
        return WeightTicketControllerApiFp(this.configuration).create(weightTicketRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} weightTicketId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WeightTicketControllerApi
     */
    public getWeightTicketByNumber(weightTicketId: number, options?: RawAxiosRequestConfig) {
        return WeightTicketControllerApiFp(this.configuration).getWeightTicketByNumber(weightTicketId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WeightTicketControllerApi
     */
    public getWeightTickets(options?: RawAxiosRequestConfig) {
        return WeightTicketControllerApiFp(this.configuration).getWeightTickets(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} weightTicketId 
     * @param {WeightTicketRequest} weightTicketRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WeightTicketControllerApi
     */
    public update(weightTicketId: number, weightTicketRequest: WeightTicketRequest, options?: RawAxiosRequestConfig) {
        return WeightTicketControllerApiFp(this.configuration).update(weightTicketId, weightTicketRequest, options).then((request) => request(this.axios, this.basePath));
    }
}

